CREATE TABLE track (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    artistId INTEGER NOT NULL,
    albumId INTEGER,
    name TEXT NOT NULL,
    loved INTEGER AS Boolean DEFAULT 0 NOT NULL,
    lovedAt INTEGER,
    UNIQUE (artistId, name),
    FOREIGN KEY (artistId) REFERENCES artist(id) ON DELETE CASCADE,
    FOREIGN KEY (albumId) REFERENCES album(id) ON DELETE CASCADE
);

getLovedTracksPageCount:
SELECT COUNT(track.id) FROM track WHERE lovedAt NOT NULL;

insert:
INSERT OR IGNORE INTO track(artistId, albumId, name, loved, lovedAt) VALUES (?, ?, ?, ?, ?);

upsertRecentTrack {
    UPDATE track
    SET albumId = :albumId,
        loved = :loved
    WHERE artistId = :artistId AND name = :name;

    INSERT OR IGNORE
    INTO track(artistId, albumId, name, loved, lovedAt)
    VALUES (:artistId, :albumId, :name, :loved, :lovedAt);
}

upsertLovedTrack {
    UPDATE track
    SET loved = :loved,
        lovedAt = :lovedAt
    WHERE artistId = :artistId AND name = :name;

    INSERT OR IGNORE
    INTO track(artistId, albumId, name, loved, lovedAt)
    VALUES (:artistId, :albumId, :name, :loved, :lovedAt);
}

dropLovedTrackDates:
UPDATE track SET lovedAt = NULL WHERE id IN (
    SELECT id FROM track WHERE lovedAt NOT NULL
);

getId:
SELECT id FROM track WHERE artistId = ? AND name = ?;

lovedTracks:
SELECT
    ar.name AS artist,
    t.name AS track,
    t.loved,
    t.lovedAt,
    al.lowArtwork
FROM track t
LEFT JOIN album al ON t.albumId = al.id
LEFT JOIN artist ar ON t.artistId = ar.id
WHERE t.lovedAt NOT NULL ORDER BY lovedAt DESC;

updateTrackLove:
UPDATE track SET loved = :loved WHERE name = :track AND artistId = (
    SELECT artistId FROM artist WHERE name = :artist
);